
※古いAndroidをお使いの方は以下apkをお試しください。
If you are using an older Android please try apk below.

txtavg_api10.apk (Android 2.3.3以降)
txtavg_api10.apk (Android 2.3.3 or later)



RPi Zero W \3800
http://www.akibaoo.co.jp/c/03/4528483147938/



文字コード「UTF-8」で作成し、"enc_scn.hs"で暗号化したシナリオファイル(拡張子.scn)を用意します。

暗号化したシナリオファイル(拡張子.scn)を下記コマンドでさらに16進文字列ファイル(拡張子.hex)に変換します。

cutehspcl enc_hex.hs

ファイル名を尋ねられますので拡張子なしで入力し、[Enter]を押してください。

これで生成された16進文字列ファイル(拡張子.hex)をWeb上にアップロードします。

		repeat c
			url=home+strf("%03d",n)+"/"+scn(cnt+1)+".hex"
			gosub *web_get :gosub *hex2bin
			bsave scn(cnt+1)+".scn",bf,sz
		loop

*hex2bin
	repeat sz/2
		h=peek(bf,cnt*2) :l=peek(bf,cnt*2+1)
		h=h-48 :h=h-7*(h>16) :l=l-48 :l=l-7*(l>16)
		poke bf,cnt,16*h+l
	loop
	poke bf,sz/2,0 :return



OutputStreamをファイルを経由しないでやりとりしたい
http://www.javaroad.jp/bbs/answer.jsp?q_id=20080219130032895
http://www.kab-studio.biz/Programing/JavaA2Z/Word/00000893.html



// バイト配列 img の参照先として io_img を指定し
// 値を bytStr に格納後、文字として _httpResult へ格納する

io_img = new java.io.ByteArrayInputStream( img );
StrWrt = new java.io.StringWriter();
while ( ( intIn = io_img.read() ) != -1 ) {
	StrWrt.write( intIn );
}
StrWrt.flush();
_httpResult = StrWrt.toString();





We made a simple multi-platform Text-AVG creation tool.
Please do not miss it.

http://www.geocities.jp/tko_soft/txtavg/en/play.htm

P.S.
We are seeking a new scenario.

Thank you,
Cutie YAMADA


Imaginative Adventurer's Square

Publicity Your Titles
Titles Impressions
Questions about txtavg


Topic!
Raspberry Pi版はTinker OSでも動作可との情報あり。


持ち歩きにはAndroid版「txtavg」をどうぞ！
For carrying around please use to Android version "txtavg"!





TINY-TREK
トレッキー御用達のクラシカルゲームをHSP3Dish(Android)で遊べるようにしました。
EXCELONION
USUAJIN




[PLAY!]
◆◆◆テキストアドベンチャーゲームで遊ぼう！◆◆◆

Windows、macOS、Linux、Raspberry Pi用の実行ファイルがあります。

★Download
000 TINY-ミステリーハウス (日本語版)
    Windows
    macOS
    Linux
    Raspberry Pi

★Download
001 TINY MYSTERY HOUSE (English version)
    Windows
    macOS
    Linux
    Raspberry Pi

ゲームの始め方

上記zipファイルをダウンロード後、解凍して
Windows環境の方は「cutehspcl.exe」を実行してください。
Windows以外の方は「cutehspcl」を実行する前に実行権限を付与してあげてください。
ターミナルから「cutehspcl」のあるディレクトリに移動し、次のコマンドで付与できると思います。

chmod 777 cutehspcl

実行権限の付与に成功したら「cutehspcl」を実行してください。

別のシナリオで遊びたいときは
「cutehspcl」と「start.hs」だけを新しいシナリオファイルのあるディレクトリにコピーし、
「cutehspcl」を実行すればOKです。

Android用はコチラ

上記apkファイルからアプリをインストールしてください。

ゲームの始め方

アプリ「txtavg」をタッチして起動し「GAME START」を選択するとゲームを始められます。
「TITLE LIST」を選択した場合、遊ぶことのできるタイトル一覧をネットからダウンロードして表示します。
3桁のタイトルNo.を入力し「Get」をタッチすると新作をダウンロードすることができます。
ダウンロードに成功したら「GAME START」でゲームを始められます。
ダウンロードしない場合は「Ret」をタッチしてください。

ちなみにまだ登録シナリオが数本しかないため、絶賛募集中です。


[CREATE]
◆◆◆テキストアドベンチャーゲームを作ろう！◆◆◆

きわめてシンプルで、ローコストで始められ、このジャンルほど手軽に個人製作できるゲームはありません。
ユーザを夢中にさせることだってシナリオ次第なのです。

このテキストアドベンチャーゲーム作成ツールのシナリオ記述方法はとても単純で直感的です。
文章は普通に書いて、シナリオコントロール用の命令をその行間に指定していくような感じです。

シナリオ記述コマンド一覧

実際にどう書くかは「TINY-ミステリーハウス」のシナリオソースを以下に公開しました。

TINY-ミステリーハウスのシナリオソース「open.txt」

参考にしてみてください。

★Download
テキストアドベンチャーゲーム作成ツール「txtavg2c」
    Windows
    macOS
    Linux
    Raspberry Pi

---
シナリオファイルの作り方

1.テキストを書く

　好きなテキストエディタでシナリオを書く
　Windows環境なら文字コードはSJIS、それ以外の環境ならUTF-8で。

2.暗号化する

　2-1.コマンプロンプト(ターミナル)から以下コマンドを実行

　cutehspcl enc_scn.hs

　2-2.暗号化したいファイル名を入力

　open.txt を変換したい場合、拡張子なしの open と入力し、[Enter]

　2-3.変換される

　open.txt → open.scn

3.実行する

　3-1.コマンプロンプトから以下コマンドを実行

　cutehspcl

　cutehspcl を単独で実行すると自動的にプログラム start.hs が読み込まれて実行されます。
　(cutehspcl start.hs とするのと同じ)
　start.hs では最初に open.scn というシナリオファイルを読み込むようになっています。







[FORUM]
◆◆◆テキストアドベンチャーゲームの情報広場！◆◆◆

面白い作品ができたらぜひお知らせください。こちらのサイトで配布させていただきたいと思います。
面白い作品ができたらぜひ配信登録してください。
やり方がよくわからない方は下記メール宛にシナリオファイルを送っていただいてもOK！








暗号化ツールは Windows、macOS、Linux、Raspberry Pi で実行可能です。
シナリオのプレーは Windows、macOS、Linux、Raspberry Pi、Android で実行可能です。






---
↓ここを参考にする
textadventures.co.uk - Create and play text adventure games



本ツールは、いかなるコンピュータにおいても最も原始的なコンソールモードで動作するため、
ほとんどのプラットフォームで実行用バイナリを用意することができました。

Windows
macOS
Linux
Raspbean
TinkerOS

Androidは(一般ユーザにとっては)この限りではないのが残念ですが、こちらはシンプルな専用アプリを用意しています。
---

自作シナリオの配信

自作シナリオをAndroidアプリ「txtavg」経由で配信可能です。

まずは文字コード「UTF-8」で作成し、"enc_scn.hs"で暗号化したシナリオファイル(拡張子.scn)を用意します。

①下記URLに管理者ログインします。

　http://geocities.co.jp/txtavg/

　ログインID
　txtavg / gogowest

①"txtavg"ディレクトリ以下に3桁の数字ディレクトリを追加します。
　例えば既に"000"～"002"まであれば"003"を作成してください。

②追加した数字ディレクトリに自作シナリオファイルを全てアップロードします。

③"txtavg"ディレクトリにある"index.htm"の内容を編集します。
　例えば"003"ディレクトリに"open.scn"と"hoge.scn"を格納したなら次のように追記します。

*003
ホゲホゲの冒険,open,hoge

④できたらAndroidアプリ「txtavg」から「TITLE LIST」をタッチしてテストしてみてください。
　Androidアプリ「txtavg」を使っているユーザーみんなが、あなたの作ったテキストアドベンチャーをゲットして遊ぶことができます！

※バックアップは取りますが不定期ですので、他の作者さんの作品登録を壊さないように注意してね。






---
How to deliver

You can distribute your own scenario via the Android application "txtavg".

First prepare a scenario file (extension .scn) created with the character code "UTF - 8" and encrypted with "enc_scn.hs".

(0) Log in as administrator to the following URL.

Http://geocities.co.jp/txtavg/

Login ID
Txtavg / gogowest

(1) Add a three-digit number directory below "txtavg" directory.
For example, if you already have "000" to "002" please create "003".

(2) Upload all your own scenario files to the added number directory.

(3) Edit the contents of "index.htm" in "txtavg" directory.
For example, if "open.scn" and "hoge.scn" are stored in the "003" directory, it is appended as follows.

*003
Tales of Hoge,open,hoge

(4) Try to test by touching "TITLE LIST" from Android application "txtavg".
Everyone using the Android application "txtavg" can get and play the text adventure you made!

note.
Be careful not to break a works registration of other authors.





http://www.geocities.jp/txtavg/
index.htm
000
001
002
003
...
999

http://www.geocities.jp/txtavg/jp/
http://www.geocities.jp/txtavg/en/
play.htm
create.htm
index.htm
How to deliver for Android

































